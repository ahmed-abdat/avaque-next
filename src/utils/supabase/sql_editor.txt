

this is sql for updating the handle_new_user

-- First, add the full_name column to consultant_profiles table
ALTER TABLE public.consultant_profiles 
ADD COLUMN full_name text;

-- Update the handle_new_user function to include full_name
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS public.handle_new_user();

-- Create the updated function with full_name handling
CREATE FUNCTION public.handle_new_user()
RETURNS TRIGGER
SECURITY DEFINER
SET search_path = public
LANGUAGE plpgsql AS $$
DECLARE
    _role text;
BEGIN
    -- Get the role from metadata, default to 'student' if not specified
    _role := coalesce(new.raw_user_meta_data->>'role', 'student');

    -- Create profile based on role
    IF _role = 'consultant' THEN
        -- For consultants, create a consultant profile with full_name
        INSERT INTO public.consultant_profiles (
            id,
            email,
            role,
            full_name,
            specialization,
            short_description,
            hourly_rate,
            is_approved,
            created_at,
            updated_at
        ) VALUES (
            new.id,
            new.email,
            _role::user_role,
            coalesce(new.raw_user_meta_data->>'full_name', ''),
            coalesce(new.raw_user_meta_data->>'specialization', ''),
            coalesce(new.raw_user_meta_data->>'short_description', ''),
            100,  -- Default hourly rate
            false,  -- Not approved by default
            now(),
            now()
        );
    ELSE
        -- For students, create a regular profile
        INSERT INTO public.profiles (
            id,
            role,
            full_name,
            email,
            created_at,
            updated_at
        ) VALUES (
            new.id,
            _role::user_role,
            new.raw_user_meta_data->>'full_name',
            new.email,
            now(),
            now()
        );
    END IF;

    RETURN new;
EXCEPTION
    WHEN others THEN
        -- Log the error (you can see this in Supabase logs)
        RAISE LOG 'Error in handle_new_user function: %', SQLERRM;
        RETURN null;
END;
$$;

-- Recreate the trigger
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Grant necessary permissions
GRANT USAGE ON SCHEMA public TO postgres, anon, authenticated, service_role;
GRANT ALL ON ALL TABLES IN SCHEMA public TO postgres, anon, authenticated, service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO postgres, anon, authenticated, service_role;
GRANT ALL ON ALL ROUTINES IN SCHEMA public TO postgres, anon, authenticated, service_role;





-- Add avatar_url column if it doesn't exist
ALTER TABLE public.consultant_profiles 
ADD COLUMN IF NOT EXISTS avatar_url TEXT;

-- Update RLS policy to allow consultants to update their avatar_url
DROP POLICY IF EXISTS "Consultants can update their own profile" ON public.consultant_profiles;

CREATE POLICY "Consultants can update their own profile"
ON public.consultant_profiles
FOR UPDATE
USING (auth.uid() = id)
WITH CHECK (auth.uid() = id);

-- Create enum for days of the week
CREATE TYPE day_of_week AS ENUM (
    'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'
);

-- Create availability table
CREATE TABLE consultant_availability (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    consultant_id UUID NOT NULL REFERENCES consultant_profiles(id) ON DELETE CASCADE,
    day day_of_week NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    CHECK (start_time < end_time)
);

-- Indexes for fast querying
CREATE INDEX idx_availability_consultant ON consultant_availability(consultant_id);
CREATE INDEX idx_availability_day ON consultant_availability(day);
CREATE INDEX idx_availability_time_range ON consultant_availability(start_time, end_time);

-- RLS Policies
ALTER TABLE consultant_availability ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Consultants can manage their availability" 
ON consultant_availability
FOR ALL USING (auth.uid() = consultant_id);

CREATE POLICY "Public availability read access" 
ON consultant_availability 
FOR SELECT USING (true);

CREATE OR REPLACE FUNCTION public.update_consultant_availability(
  p_consultant_id uuid,
  p_availability consultant_availability[]
) RETURNS void 
LANGUAGE plpgsql 
SECURITY DEFINER 
SET search_path = public  -- Explicitly set search path
AS $$
BEGIN
  -- Delete only days not present in the new availability
  DELETE FROM consultant_availability
  WHERE consultant_id = p_consultant_id
    AND day NOT IN (SELECT day FROM unnest(p_availability));

  -- Upsert the new availability data
  INSERT INTO consultant_availability (
    id,
    consultant_id,
    day,
    start_time,
    end_time
  )
  SELECT
    a.id,
    p_consultant_id,
    a.day,
    a.start_time::time,
    a.end_time::time
  FROM unnest(p_availability) AS a
  ON CONFLICT (consultant_id, day) DO UPDATE
  SET
    start_time = EXCLUDED.start_time,
    end_time = EXCLUDED.end_time,
    updated_at = NOW();
END;
$$;

-- First make sure uuid-ossp extension is enabled (if not already)
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Modify the id column to use uuid_generate_v4() as default (if not already)
ALTER TABLE consultant_availability 
ALTER COLUMN id SET DEFAULT uuid_generate_v4();

-- Add unique constraint only if it doesn't exist
DO $$ 
BEGIN 
    -- Check if the constraint doesn't exist
    IF NOT EXISTS (
        SELECT 1 
        FROM pg_constraint 
        WHERE conname = 'unique_consultant_day'
    ) THEN
        -- Add the constraint
        ALTER TABLE consultant_availability 
        ADD CONSTRAINT unique_consultant_day UNIQUE (consultant_id, day);
    END IF;
END $$;



